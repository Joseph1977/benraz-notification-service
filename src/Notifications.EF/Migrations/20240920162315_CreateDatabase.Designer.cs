// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notifications.EF;

#nullable disable

namespace Notifications.EF.Migrations
{
    [DbContext(typeof(NotificationsDbContext))]
    [Migration("20240920162315_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Notifications.Domain.Settings.SettingsEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("SettingsEntryId");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SettingsEntries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "General:AuthorizationBaseUrl",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6620),
                            Description = "Base URL of Authorization service",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6620)
                        },
                        new
                        {
                            Id = "General:AuthorizationAccessToken",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6631),
                            Description = "Access token to Authorization service",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6631)
                        },
                        new
                        {
                            Id = "TokenValidation:Audience",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6633),
                            Description = "Comma separated audiences allowed",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6633)
                        },
                        new
                        {
                            Id = "Emails:SendGridApiKey",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6634),
                            Description = "SendGrid API key for email",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6634)
                        },
                        new
                        {
                            Id = "Emails:SupportEmail",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6636),
                            Description = "Support email",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6636)
                        },
                        new
                        {
                            Id = "Emails:SupportPhone",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6637),
                            Description = "Support phone number",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6637)
                        },
                        new
                        {
                            Id = "Emails:SendGridAsmId",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6639),
                            Description = "SendGrid ASM identifier for email",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6639)
                        },
                        new
                        {
                            Id = "Phones:AccountSID",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6640),
                            Description = "SendGrid API key for sms",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6640)
                        },
                        new
                        {
                            Id = "Phones:AuthToken",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6642),
                            Description = "Account authentication",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6642)
                        },
                        new
                        {
                            Id = "Phones:OutTwillionumber",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6643),
                            Description = "Support phone number",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6643)
                        },
                        new
                        {
                            Id = "MessagesFilter:Emails:IsEnabled",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6645),
                            Description = "Email filter enable/disable parameter",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6645),
                            Value = "False"
                        },
                        new
                        {
                            Id = "MessagesFilter:Emails:Type",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6655),
                            Description = "0 (eWhiteList) - Allow only from white list; 1 (ePatern) - Allo only if fit a regix pattern; 2 (eTraverse) -Travers ALL to specific email; 3 (eAllowAll) - Do not filter, allow all.; 4 (eDiableAll) - This mean No email will be passed, kind of disable feature; 5 (eWhiteDomainList) - Allow emails only with Domain in the DomainsWhitelist from EmailFilter list, not valid for phones",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6655)
                        },
                        new
                        {
                            Id = "MessagesFilter:Emails:Value",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6656),
                            Description = "Email filter value (can be list with comma)",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6656)
                        },
                        new
                        {
                            Id = "MessagesFilter:Phones:IsEnabled",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6664),
                            Description = "Phone filter enable/disable parameter",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6664),
                            Value = "False"
                        },
                        new
                        {
                            Id = "MessagesFilter:Phones:Type",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6695),
                            Description = "0 (eWhiteList) - Allow only from white list; 1 (ePatern) - Allo only if fit a regix pattern; 2 (eTraverse) -Travers ALL to specific email; 3 (eAllowAll) - Do not filter, allow all.; 4 (eDiableAll) - This mean No email will be passed, kind of disable feature; 5 (eWhiteDomainList) - Allow emails only with Domain in the DomainsWhitelist from EmailFilter list, not valid for phones",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6695)
                        },
                        new
                        {
                            Id = "MessagesFilter:Phones:Value",
                            CreateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6698),
                            Description = "Phone filter value (can be list with comma)",
                            UpdateTimeUtc = new DateTime(2024, 9, 20, 16, 23, 14, 534, DateTimeKind.Utc).AddTicks(6698)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
